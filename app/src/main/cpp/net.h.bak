#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <unistd.h>
#include <fcntl.h>
#include <netinet/tcp.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#include "android/log.h"

#define LOG_TAG "TAG/Native"
#define LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)
#define LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)

long get_time_ms() {
    struct timeval tv = {0};
    long time_ms;
    gettimeofday(&tv, NULL);
    time_ms = tv.tv_sec * 1000 + tv.tv_usec / 1000;
    return time_ms;
}

long time_left(long t_end, long t_now) {
    long t_left;
    if (t_end > t_now) {
        t_left = t_end - t_now;
    } else {
        t_left = 0;
    }
    return t_left;
}

int tcp_connect(const char *host, const char *port) {
    int ret;
    struct addrinfo hints, *addr_list, *cur;
    int fd = 0;
    memset(&hints, 0x00, sizeof(hints));
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    ret = getaddrinfo(host, port, &hints, &addr_list);
    if (ret) {
        if (ret == EAI_SYSTEM)
            LOGE("getaddrinfo(%s:%s) error: %s", host, port, strerror(errno));
        else
            LOGE("getaddrinfo(%s:%s) error: %s", host, port, gai_strerror(errno));
        return 0;
    }
    for (cur = addr_list; cur != NULL; cur = cur->ai_next) {
        fd = socket(cur->ai_family, cur->ai_socktype, cur->ai_protocol);
        if (fd < 0) {
            ret = 0;
            continue;
        }
        if (connect(fd, cur->ai_addr, cur->ai_addrlen) == 0) {
            ret = fd;
            break;
        }
        close(fd);
        ret = 0;
    }
    if (0 == ret) {
        LOGE("fail to connect with TCP server: %s:%s", host, port);
    }
    freeaddrinfo(addr_list);
    return ret;

}

int tcp_disconnect(int fd) {
    int rc;
    rc = shutdown(fd, 2);
    if (0 != rc) {
        LOGE("shutdown error: %s", strerror(errno));
        return -1;
    }
    rc = close(fd);
    if (0 != rc) {
        LOGE("closesocket error: %s", strerror(errno));
        return -1;
    }
    return 0;
}

int tcp_read(int fd, unsigned char *buf, uint32_t len, long timeout_ms, size_t *read_len) {
    int ret, err_code;
    uint32_t len_recv;
    long t_end, t_left;
    fd_set sets;
    struct timeval timeout;
    t_end = get_time_ms() + timeout_ms;
    len_recv = 0;
    err_code = 0;
    do {
        t_left = time_left(t_end, get_time_ms());
        if (0 == t_left) {
            err_code = 1;
            break;
        }
        FD_ZERO(&sets);
        FD_SET(fd, &sets);
        timeout.tv_sec = t_left / 1000;
        timeout.tv_usec = (t_left % 1000) * 1000;
        ret = select(fd + 1, &sets, NULL, NULL, &timeout);
        if (ret > 0) {
            ret = recv(fd, buf + len_recv, len - len_recv, 0);
            if (ret > 0) {
                len_recv += ret;
            } else if (0 == ret) {
                struct sockaddr_in peer;
                socklen_t sLen = sizeof(peer);
                int peer_port = 0;
                getpeername(fd, (struct sockaddr *) &peer, &sLen);
                peer_port = ntohs(peer.sin_port);
                LOGE("connection is closed by server: %s:%d", inet_ntoa(peer.sin_addr), peer_port);
                err_code = 2;
                break;
            } else {
                if (EINTR == errno) {
                    LOGE("EINTR be caught");
                    continue;
                }
                LOGE("recv error: %s", strerror(errno));
                err_code = 3;
                break;
            }
        } else if (0 == ret) {
            err_code = 5;
            break;
        } else {
            LOGE("select-recv error: %s", strerror(errno));
            err_code = 6;
            break;
        }
    } while ((len_recv < len));
    *read_len = (size_t) len_recv;
    return (len == len_recv) ? 0 : err_code;
}